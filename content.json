{"meta":{"title":"survival_F","subtitle":"Do what u love, love what u do","description":"","author":"zhangyifeng","url":"https://surviavalf.github.io","root":"/"},"pages":[{"title":"categories","date":"2020-05-26T08:20:24.000Z","updated":"2021-08-18T09:04:30.633Z","comments":true,"path":"categories/index.html","permalink":"https://surviavalf.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-05-26T08:20:24.000Z","updated":"2021-08-24T05:14:49.412Z","comments":true,"path":"tags/index.html","permalink":"https://surviavalf.github.io/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-08-30T06:18:04.000Z","updated":"2021-08-30T07:53:00.079Z","comments":true,"path":"friends/index.html","permalink":"https://surviavalf.github.io/friends/index.html","excerpt":"","text":"Hexohttp://hexo.io VUEhttps://cn.vuejs.org/ Elementhttps://element.eleme.cn/#/zh-CN Echartshttps://echarts.apache.org/zh/index.html Lodashhttps://www.lodashjs.com/ Es6https://es6.ruanyifeng.com/"}],"posts":[{"title":"hexo博客引入动态图标chart","slug":"technology/hexo/chart","date":"2021-08-30T02:55:43.000Z","updated":"2021-08-30T05:09:15.589Z","comments":true,"path":"2021/08/30/technology/hexo/chart/","link":"","permalink":"https://surviavalf.github.io/2021/08/30/technology/hexo/chart/","excerpt":"","text":"Hexo 中的 ChartjsChartjs 的文档首页，相比于 ECharts，感觉 Chart 的某些图表或动画的帧率不高，但是画风清新、干净，令人很舒适，也相对于在 hexo 中引入 ECharts 要简单，前提是引用其他博主写的插件（十分感谢 shen-yu，博主地址）,插件用 npm 安装 1npm install hexo-tag-chart --save 之后在文章内使用 chart 的 tag 就可以了 123&#123;% chart 90% 300 %&#125;\\\\TODO option goes here&#123;% endchart %&#125; 示例 var ctx = document.getElementById('chart4595').getContext('2d'); var options = { type: 'line', data: { labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'], datasets: [{ label: 'My First dataset', backgroundColor: 'rgb(112, 66, 185,0.5)', borderColor: 'rgb(112, 66, 185,0.5)', data: [0, 10, 5, 2, 20, 30, 45] }] }, options: { responsive: true, title: { display: true, text: 'Chart.js Line Chart' } } }; new Chart(ctx, options); 代码 123456789101112131415161718192021&#123;% chart 90% 300 %&#125; &#123; type: &#x27;line&#x27;, data: &#123; labels: [&#x27;January&#x27;, &#x27;February&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;May&#x27;, &#x27;June&#x27;, &#x27;July&#x27;], datasets: [&#123; label: &#x27;My First dataset&#x27;, backgroundColor: &#x27;rgb(112, 66, 185,0.5)&#x27;, borderColor: &#x27;rgb(112, 66, 185,0.5)&#x27;, data: [0, 10, 5, 2, 20, 30, 45] &#125;] &#125;, options: &#123; responsive: true, title: &#123; display: true, text: &#x27;Chart.js Line Chart&#x27; &#125; &#125;&#125;&#123;% endchart %&#125;","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://surviavalf.github.io/tags/Hexo/"}],"author":"zhangyifeng"},{"title":"电脑控制手机的小软件","slug":"softWear/control-phone","date":"2021-08-27T06:13:50.000Z","updated":"2021-08-30T08:42:42.830Z","comments":true,"path":"2021/08/27/softWear/control-phone/","link":"","permalink":"https://surviavalf.github.io/2021/08/27/softWear/control-phone/","excerpt":"","text":"QtScrcpy 软件 实时显示 Android 设备屏幕,实时键鼠控制 Android 设备。支持 GNU/Linux，Windows 和 MacOS 使用方法在你的电脑上接入 Android 设备，然后运行程序，按顺序点击如下按钮即可连接到 Android 设备 无线连接步骤（保证手机和电脑在同一个局域网）： 安卓手机端在开发者选项中打开 usb 调试 通过 usb 连接安卓手机到电脑 点击刷新设备，会看到有设备号更新出来 点击获取设备 IP(可能需要开启wifi) 点击启动 adbd 无线连接 再次点击刷新设备，发现多出了一个 IP 地址开头的设备，选择这个设备 启动服务 备注：启动 adbd 以后不用再连着 usb 线了，以后连接断开都不再需要，除非安卓 adbd 停了需要重新启动","categories":[],"tags":[{"name":"soft-wear","slug":"soft-wear","permalink":"https://surviavalf.github.io/tags/soft-wear/"}],"author":"zhangyifeng"},{"title":"El-tree设置","slug":"technology/frontEnd/Webjs/set-El-tree","date":"2021-08-24T03:08:33.000Z","updated":"2021-08-30T02:52:06.898Z","comments":true,"path":"2021/08/24/technology/frontEnd/Webjs/set-El-tree/","link":"","permalink":"https://surviavalf.github.io/2021/08/24/technology/frontEnd/Webjs/set-El-tree/","excerpt":"","text":"El-tree 设置El-tree 横向显示12345678910&lt;el-tree class=&quot;el-tree&quot; ref=&quot;refElTree&quot; :data=&quot;routeList&quot; show-checkbox node-key=&quot;value&quot; :props=&quot;defaultProps&quot; @node-expand=&quot;handleExpand&quot; :render-content=&quot;renderContent&quot;&gt;&lt;/el-tree&gt; data 1234let routeList = ref([]); //树节点 let defaultProps = ref(&#123; children: &quot;children&quot;, label: &quot;label&quot;,&#125;); //树节点 js 123456789101112131415161718192021222324252627282930313233343536373839//树节点的内容区的渲染 Functionconst renderContent = (h, &#123; node, data, store &#125;) =&gt; &#123; let classname = &quot;&quot;; // 由于项目中有三级菜单也有四级级菜单，就要在此做出判断 if (node.level === 4) &#123; classname = &quot;foo&quot;; &#125; if (node.level === 3 &amp;&amp; node.childNodes.length === 0) &#123; classname = &quot;foo&quot;; &#125; if (node.level === 2 &amp;&amp; node.childNodes.length === 0) &#123; classname = &quot;foo&quot;; &#125; return h( &quot;p&quot;, &#123; class: classname &#125;, node.label );&#125;;//节点被展开时触发的事件const handleExpand = () =&gt; &#123; //因为该函数执行在renderContent函数之前，所以得加this.$nextTick() proxy.$nextTick(() =&gt; &#123; changeCss(); &#125;);&#125;;//更改cssconst changeCss = () =&gt; &#123; let levelName = document.getElementsByClassName(&quot;foo&quot;); // levelname是上面的最底层节点的名字 for (let i = 0; i &lt; levelName.length; i++) &#123; // cssFloat 兼容 ie6-8 styleFloat 兼容ie9及标准浏览器 levelName[i].parentNode.style.cssFloat = &quot;left&quot;; // 最底层的节点，包括多选框和名字都让他左浮动 levelName[i].parentNode.style.styleFloat = &quot;left&quot;; levelName[i].parentNode.onmouseover = function () &#123; this.style.backgroundColor = &quot;#fff&quot;; &#125;; &#125;&#125;; El-tree 选择的节点获取1234let Nodes = [ ...refElTree.value.getHalfCheckedKeys(), ...refElTree.value.getCheckedKeys()]; 当父节点中的子节点未完全选择，父组件是半选择状态时，想要获取全部节点（包括半选择的父节点）使用此方法 以下为引用↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓el-tree 组件在获取选择的节点时，默认的逻辑是，选中父节点时所有的子节点会被选中（checked），但是当该节点下不是选中所有子节点的时候，主节点不会被选中，而是处于一种半选中状态，提交时通过 getCheckedKeys() 方法也不会提交父节点，因为半选中状态下 checked 属性是 false 的。 解决办法通常如果只是为了提交数据，我们可以使用 getHalfCheckedKeys()+getCheckedKeys()来获取需要的数据const data=[…this.$refs.tree.getHalfCheckedKeys(),…this.$refs.tree.getCheckedKeys()] 但是如果需要保存数据且需要编辑，那在编辑初始设置选中项的时候将遇到问题，所以我们只能使用 el-tree 现有的 api 来自己实现需要的功能，el-tree 中有一个属性 check-strictly（在显示复选框的情况下，是否严格的遵循父子不互相关联的做法，默认为 false）意思就是勾选父节点和勾选子节点，没有任何的关系。这是为了解决默认选中节点加载时，选中父节点会同时选中所以子节点，显然这不是我们想要的。&lt;el-treeshow-checkboxnode-key=”id”check-strictly@check-change=”checkChange”ref=”tree”&gt;然后使用 check-change 事件（节点选中状态发生变化时的回调）共三个参数，依次为：传递给 data 属性的数组中该节点所对应的对象、节点本身是否被选中、节点的子树中是否有被选中的节点 1234567891011121314151617181920212223242526272829303132333435checkChange(data, check) &#123; // 父节点操作 if (data.parentId !== null) &#123; if (check === true) &#123; // 如果选中，设置父节点为选中 this.$refs.tree.setChecked(data.parentId, true); &#125; else &#123; // 如果取消选中，检查父节点是否该取消选中（可能仍有子节点为选中状态） var parentNode = this.$refs.tree.getNode(data.parentId); var parentHasCheckedChild = false; for ( var i = 0, parentChildLen = parentNode.childNodes.length; i &lt; parentChildLen; i++ ) &#123; if (parentNode.childNodes[i].checked === true) &#123; parentHasCheckedChild = true; break; &#125; &#125; if (!parentHasCheckedChild) this.$refs.tree.setChecked(data.parentId, false); &#125; &#125; // 子节点操作，如果取消选中，取消子节点选中 if (data.children != null &amp;&amp; check === false) &#123; for (var j = 0, len = data.children.length; j &lt; len; j++) &#123; var childNode = this.$refs.tree.getNode(data.children[j].id); if (childNode.checked === true) &#123; this.$refs.tree.setChecked(childNode.data.id, false); &#125; &#125; &#125;&#125; 作者：段邵华链接：https://www.jianshu.com/p/a482b25ac212来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑","categories":[{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"Element组件","slug":"web前端/Element组件","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/Element%E7%BB%84%E4%BB%B6/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://surviavalf.github.io/tags/Vue/"}],"author":"zhangyifeng"},{"title":"css修改","slug":"technology/frontEnd/Webcss/something-css","date":"2021-08-24T02:49:19.000Z","updated":"2021-08-30T07:34:01.183Z","comments":true,"path":"2021/08/24/technology/frontEnd/Webcss/something-css/","link":"","permalink":"https://surviavalf.github.io/2021/08/24/technology/frontEnd/Webcss/something-css/","excerpt":"","text":"1.箭头↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ 2.el-input 属性 type=”number”时去掉右侧箭头本人使用过的未确定好不好用的12345678910111213141516input::-webkit-outer-spin-button,input::-webkit-inner-spin-button &#123; -webkit-appearance: none !important; -moz-appearance: none !important; -o-appearance: none !important; -ms-appearance: none !important; appearance: none !important; margin: 0;&#125;input[type=&quot;number&quot;] &#123; -webkit-appearance: textfield; -moz-appearance: textfield; -o-appearance: textfield; -ms-appearance: textfield; appearance: textfield;&#125;1234567/deep/.[className] input::-webkit-outer-spin-button,/deep/.[className] input::-webkit-inner-spin-button &#123; -webkit-appearance: none !important;&#125;/deep/.[className] input[type=&quot;number&quot;] &#123; -moz-appearance: textfield;&#125; 3.选中改变样式data 里isActive:-1, method 里 123checkedItem(index)&#123; this.isActive=index;&#125;, 页面里 1&lt;div v-for=&quot;(item,index) in nameoptions&quot; class=&quot;class名&quot; :class=&quot;&#123;新加的class样式:index==isActive&#125;&quot; @click=&quot;checkItem(index)&gt;&#123;&#123;item.name&#125;&#125;&lt;/div&gt; 4.Element 滚动条样式123456789 .el-table__body-wrapper::-webkit-scrollbar &#123; width: 0px !important; height: 0px !important; &#125; .el-table__body-wrapper::-webkit-scrollbar-thumb &#123; border-radius: 0px !important; background: transparent !important;&#125; 5.鼠标悬停样式用 css 添加手状样式,鼠标移上去变小手,变小手 cursor:pointer; cursor 其他取值 auto ：标准光标 default ：标准箭头 pointer, hand ：手形光标 wait ：等待光标 text ：I 形光标 vertical-text ：水平 I 形光标 no-drop ：不可拖动光标 not-allowed ：无效光标 help ：帮助光标 all-scroll ：三角方向标 move ：移动标 crosshair ：十字标 e-resize n-resize nw-resize w-resize s-resize se-resize sw-resize 用 JS 使鼠标变小手 onmouseover(鼠标越过的时候)onmouseover=”this.style.cursor=’hand’” 6.纯英文，数字不换行问题处理1.问题描述： 用户输入一串英文字母，设置了换行，但是只有中文换行，英文不换行 2.处理方式： 英文一串字母，被认为是一个单词，所以不换行 1234567 &#123; overflow: hidden; white-space: normal; word-wrap: break-word; word-break: break-all; text-overflow: ellipsis;&#125;","categories":[{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"web前端/CSS","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/CSS/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://surviavalf.github.io/tags/Vue/"},{"name":"CSS","slug":"CSS","permalink":"https://surviavalf.github.io/tags/CSS/"}],"author":"zhangyifeng"},{"title":"table列表匹配","slug":"technology/frontEnd/Webjs/table-data-matching","date":"2021-08-24T02:44:12.000Z","updated":"2021-08-30T02:52:11.559Z","comments":true,"path":"2021/08/24/technology/frontEnd/Webjs/table-data-matching/","link":"","permalink":"https://surviavalf.github.io/2021/08/24/technology/frontEnd/Webjs/table-data-matching/","excerpt":"","text":"table 列表数据匹配123456789101112131415161718//Html&lt;el-table-column prop=&quot;rcCreatePerson&quot; align=&quot;center&quot; label=&quot;创建人&quot; :formatter=&quot;rcCreatePersonFormatter&quot; show-overflow-tooltip&gt;&lt;/el-table-column&gt;//js// 创建人rcCreatePersonFormatter(row, column, cellValue) &#123; try &#123; return this.userList.find((item) =&gt; item.userId === cellValue). userName; &#125; catch (e) &#123; return cellValue; &#125;&#125;,","categories":[{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"Element组件","slug":"web前端/Element组件","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/Element%E7%BB%84%E4%BB%B6/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://surviavalf.github.io/tags/Vue/"}],"author":"zhangyifeng"},{"title":"动态表头","slug":"technology/frontEnd/Webjs/dynamic-table-header","date":"2021-08-24T02:35:48.000Z","updated":"2021-08-30T02:52:15.442Z","comments":true,"path":"2021/08/24/technology/frontEnd/Webjs/dynamic-table-header/","link":"","permalink":"https://surviavalf.github.io/2021/08/24/technology/frontEnd/Webjs/dynamic-table-header/","excerpt":"","text":"动态表头Html表内数据的字段名需要对应表头中的 prop 123456789101112131415161718192021222324252627282930313233&lt;el-table :data=&quot;peopleDataList&quot; height=&quot;92%&quot; border style=&quot;width: 100%&quot; v-loading=&quot;tableLoading&quot;&gt; &lt;el-table-column prop=&quot;tfUpdateDate&quot; align=&quot;center&quot; label=&quot;更新时间&quot; &gt;&lt;/el-table-column&gt; &lt;el-table-column align=&quot;center&quot; v-for=&quot;(item, index, key) in equTable_columns&quot; :item=&quot;item&quot; :key=&quot;key&quot; :index=&quot;index&quot; :label=&quot;item.label&quot; &gt; &lt;template v-slot:header&gt; &lt;el-popover width=&quot;400&quot; trigger=&quot;hover&quot; placement=&quot;top&quot;&gt; &lt;span style=&quot;color: white;&quot;&gt;&#123;&#123; item.label &#125;&#125;&lt;/span&gt; &lt;div slot=&quot;reference&quot; class=&quot;header-ellipsis&quot;&gt; &lt;span&gt;&#123;&#123; item.label &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/el-popover&gt; &lt;/template&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &#123;&#123; scope.row[item.prop] &#125;&#125; &lt;/template&gt; &lt;/el-table-column&gt;&lt;/el-table&gt; Data123456789101112131415161718192021222324252627282930313233//表头信息equTable_columns: [&#123; prop: &quot;name1&quot;, label: &quot;事件A&quot;, width: &quot;&quot;,&#125;,&#123; prop: &quot;name2&quot;, label: &quot;事件B&quot;, width: &quot;&quot;,&#125;,&#123; prop: &quot;name3&quot;, label: &quot;事件C&quot;, width: &quot;&quot;,&#125;,&#123; prop: &quot;name4&quot;, label: &quot;事件D&quot;, width: &quot;&quot;,&#125;,],//表内信息peopleDataList:[ &#123; tfUpdateDate: &quot;2021-10-9&quot;, name1:&quot;事件1&quot; &#125;, &#123; tfUpdateDate: &quot;2021-10-9&quot;, &#125;] 表头过长隐藏12345678&lt;template v-slot:header&gt; &lt;el-popover width=&quot;400&quot; trigger=&quot;hover&quot; placement=&quot;top&quot;&gt; &lt;span style=&quot;color: white;&quot;&gt;&#123;&#123; item.label &#125;&#125;&lt;/span&gt; &lt;div slot=&quot;reference&quot; class=&quot;header-ellipsis&quot;&gt; &lt;span&gt;&#123;&#123; item.label &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/el-popover&gt;&lt;/template&gt; 123456789101112/deep/.el-popover &#123; max-width: 200px; width: none; text-align: center !important;&#125;.header-ellipsis &#123; width: 120px; padding: 0px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;&#125;","categories":[{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"Element组件","slug":"web前端/Element组件","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/Element%E7%BB%84%E4%BB%B6/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://surviavalf.github.io/tags/Vue/"}],"author":"zhangyifeng"},{"title":"递归","slug":"technology/frontEnd/Webjs/recursion","date":"2021-08-24T02:27:50.000Z","updated":"2021-08-30T02:50:58.892Z","comments":true,"path":"2021/08/24/technology/frontEnd/Webjs/recursion/","link":"","permalink":"https://surviavalf.github.io/2021/08/24/technology/frontEnd/Webjs/recursion/","excerpt":"","text":"vue 递归代码123456789101112131415161718192021222324caltaskScorePeopleData(item) &#123; var that = this; let len = this.score.length - 1; let index = 0; setData(); function setData() &#123; let params = &#123; taUuid: that.score[index].taUuid, evaluationScore: that.score[index].evaluationScore, userUuid: that.score[index].userUuid, eventId: that.score[index].eventId, &#125;; personnelAssessmentScore(params).then((res) =&gt; &#123; index++; if (index &gt; len) &#123; that.caltaskScorePeople2(item); &#125; else &#123; setData(); &#125; &#125;); &#125;&#125;,","categories":[{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"js","slug":"web前端/js","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/js/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://surviavalf.github.io/tags/Vue/"}],"author":"zhangyifeng"},{"title":"部分数据处理方式","slug":"technology/frontEnd/Webjs/js- dispose","date":"2021-08-24T02:25:43.000Z","updated":"2021-08-30T07:45:07.744Z","comments":true,"path":"2021/08/24/technology/frontEnd/Webjs/js- dispose/","link":"","permalink":"https://surviavalf.github.io/2021/08/24/technology/frontEnd/Webjs/js-%20dispose/","excerpt":"","text":"1.计算时间差代码1234567891011121314151617181920212223242526 timeChange(data1, data2) &#123; let dateBegin = new Date(data2.replace(/-/g, &quot;/&quot;)); let dateEnd = new Date(data1.replace(/-/g, &quot;/&quot;)); let dateDiff = dateEnd.getTime() - dateBegin.getTime(); //时间差的毫秒数 let dayDiff = Math.floor(dateDiff / (24 * 3600 * 1000)); //计算出相差天数 let leave1 = dateDiff % (24 * 3600 * 1000); //计算天数后剩余的毫秒数 let hours = Math.floor(leave1 / (3600 * 1000)); //计算出小时数 //计算相差分钟数 let leave2 = leave1 % (3600 * 1000); //计算小时数后剩余的毫秒数 let minutes = Math.floor(leave2 / (60 * 1000)); //计算相差分钟数 //计算相差秒数 let leave3 = leave2 % (60 * 1000); //计算分钟数后剩余的毫秒数 let seconds = Math.round(leave3 / 1000); console.log( &quot; 相差 &quot; + dayDiff + &quot;天 &quot; + hours + &quot;小时 &quot; + minutes + &quot; 分钟&quot; + seconds + &quot; 秒&quot; ); &#125;, 2.刷新数组this.$forceUpdate() 3.小数取整1，Math.ceil()方法向上取整，整数部分值+1： eg：Math.ceil(3/2) 输出：2 2，Math.floor()方法向下取整，整数部分值不变： eg：Math.floor(3/2) 输出：1 3，Math.round()方法四舍五入取整： eg：Math.round(3/2) 输出：2 4，parseInt()方法 抛去小数部分，只取整数部分： eg：parseInt(3/2) 输出：1 4.手机号/身份证1234567891011121314151617181920212223//reg.js页面//判断是否是手机号export const isPhoneNumber = (mobile) =&gt; &#123; let reg = /^1(3[0-9]|4[5,7]|5[0,1,2,3,5,6,7,8,9]|6[2,5,6,7]|7[0,1,7,8]|8[0-9]|9[1,8,9])\\d&#123;8&#125;$/; return reg.test(mobile);&#125;;//判断是否是身份证export const isCardNo = (card) =&gt; &#123; let reg = /^[1-9]\\d&#123;5&#125;[1-9]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;([0-9]|X)$/; return reg.test(card);&#125;;//手机号中间隐藏export const mobileEncrypt = (mobile) =&gt; &#123; mobile = mobile + &quot;&quot;; return `+86$&#123;mobile.replace(/(\\d&#123;3&#125;)\\d*(\\d&#123;4&#125;)/, `$1 **** $2`)&#125;`;&#125;;//Vueimport &#123; mobileEncrypt &#125; from &quot;@/utils/reg.js&quot;;userMobilePhone = mobileEncrypt(userMobilePhone); 5.字符长度计算（中文算两个字符）12345678910111213export const getStringLength = (e) =&gt; &#123; let [length, cn, en] = [0, 0, 0]; Array.from(e).map((item) =&gt; &#123; if (e.charAt(item).match(/[\\u4e00-\\u9fa5]/g)) &#123; length += 2; cn++; &#125; else &#123; length += 1; en++; &#125; &#125;); return length;&#125;;","categories":[{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"js","slug":"web前端/js","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/js/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://surviavalf.github.io/tags/Vue/"}],"author":"zhangyifeng"},{"title":"人员选择器","slug":"technology/frontEnd/Webjs/personnel-selection","date":"2021-08-18T03:14:07.000Z","updated":"2021-08-30T02:52:01.405Z","comments":true,"path":"2021/08/18/technology/frontEnd/Webjs/personnel-selection/","link":"","permalink":"https://surviavalf.github.io/2021/08/18/technology/frontEnd/Webjs/personnel-selection/","excerpt":"","text":"使用 Element-plus 中的 Transfer 穿梭框 组件封装的一个人员选择器，使用的是 VUE3 中的 setup 语法糖写法 选择器子组件的.vue 文件代码userMailList 为全部人员 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133&lt;template&gt; &lt;el-dialog title=&quot;人员选择&quot; v-model=&quot;show&quot; width=&quot;640px&quot; :close-on-click-modal=&quot;false&quot; center @close=&quot;clearitems&quot; &gt; &lt;div class=&quot;peopleCheck&quot;&gt; &lt;el-transfer v-model=&quot;yetPeople&quot; filterable :filter-method=&quot;filterMethod&quot; filter-placeholder=&quot;请输入人员拼音&quot; :data=&quot;allPeople&quot; @left-check-change=&quot;changeLeftPeople&quot; :titles=&quot;[&#x27;未选人员&#x27;, &#x27;已选人员&#x27;]&quot; /&gt; &lt;/div&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;check&quot;&gt;确认&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; ref, reactive, onMounted, defineEmits, defineProps, defineExpose, watch,&#125; from &quot;vue&quot;;import &#123; userMailList &#125; from &quot;@/http/api/workbench&quot;;const emits = defineEmits([&quot;clearitems&quot;, &quot;backData&quot;]);const props = defineProps(&#123; choosePeople: &#123; type: Array, default: () =&gt; &#123; return []; &#125;, &#125;, type: &#123; type: String, default: () =&gt; &#123; return &quot;&quot;; &#125;, &#125;,&#125;);let show = ref(true);let yetPeople = ref([]);let allPeople = ref([]);let leftPeople = ref(&quot;&quot;);//拉取数据const generateData = async () =&gt; &#123; let res = await userMailList(&#123;&#125;); let peopleList = res.data; const datain = []; peopleList.forEach((item, index) =&gt; &#123; datain.push(&#123; label: item.userName, key: item.accountId, spell: item.userName, disabled: item.isMain === true ? true : false, isAdmin: item.isMain, &#125;); &#125;); allPeople.value = datain; yetPeople.value = JSON.parse(JSON.stringify(props.choosePeople));&#125;;//确认const check = () =&gt; &#123; emits(&quot;backData&quot;, yetPeople.value); clearitems();&#125;;//左侧选择的人员监听const changeLeftPeople = (query, item) =&gt; &#123; leftPeople.value = query;&#125;;//退出const clearitems = () =&gt; &#123; emits(&quot;clearitems&quot;);&#125;;//自定义搜索方法const filterMethod = (query, item) =&gt; &#123; return item.spell.indexOf(query) &gt; -1;&#125;;// 监听//监听左侧人员选择状态watch(leftPeople, (nVal) =&gt; &#123; if (leftPeople.value.length &gt; 0 &amp;&amp; props.type == &quot;limt1&quot;) &#123; allPeople.value.forEach((item, index) =&gt; &#123; if (item.key != leftPeople.value) &#123; item.disabled = true; &#125; &#125;); &#125; else if (props.type == &quot;limt1&quot;) &#123; allPeople.value.forEach((item, index) =&gt; &#123; if (item.isAdmin !== true) &#123; item.disabled = false; &#125; &#125;); &#125;&#125;);//监听右侧是否有已选择的人员watch(yetPeople, (nVal) =&gt; &#123; if (yetPeople.value.length == 0 &amp;&amp; props.type == &quot;limt1&quot;) &#123; allPeople.value.forEach((item, index) =&gt; &#123; if (item.isAdmin !== true) &#123; item.disabled = false; &#125; &#125;); &#125;&#125;);onMounted(() =&gt; &#123; generateData();&#125;);&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.peopleCheck &#123; height: 500px; ::v-deep(.el-transfer-panel__body) &#123; height: 350px; &#125; ::v-deep(.el-transfer-panel__list.is-filterable) &#123; height: 350px; &#125;&#125;&lt;/style&gt; 父组件的部分代码template 内引入子组件123456789&lt;PeopleCheck ref=&quot;refPeopleCheck&quot; v-if=&quot;checkPeopleCheck&quot; :choosePeople=&quot;choosePeople&quot; 已选的人员的ID数组 type=&quot;limt1&quot; 打开只能从左侧选择一个人的模式 @backData=&quot;backData&quot; 回显 @clearitems=&quot;clearitems&quot; 关闭 /&gt; js1234567891011121314//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓成员选择组件↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓////打开成员选择const peopleCheckShow = async (row) =&gt; &#123; //已选择的人 choosePeople.value = &#123;&#123;子组件中peopleList的key相对应 &#125;&#125; checkPeopleCheck.value = true;&#125;;//成员选择回显的数据const backData = (data) =&gt; &#123;&#125;;//关闭const clearitems = (row) =&gt; &#123; checkPeopleCheck.value = false;&#125;;//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑成员选择组件↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑//","categories":[{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"Element组件","slug":"web前端/Element组件","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/Element%E7%BB%84%E4%BB%B6/"}],"tags":[{"name":"Vue3","slug":"Vue3","permalink":"https://surviavalf.github.io/tags/Vue3/"},{"name":"ElementPlus","slug":"ElementPlus","permalink":"https://surviavalf.github.io/tags/ElementPlus/"}],"author":"zhangyifeng"},{"title":"Hello World","slug":"hello-world","date":"2021-08-16T06:11:30.000Z","updated":"2021-08-18T02:26:05.553Z","comments":true,"path":"2021/08/16/hello-world/","link":"","permalink":"https://surviavalf.github.io/2021/08/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"author":"zhangyifeng"}],"categories":[{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"Element组件","slug":"web前端/Element组件","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/Element%E7%BB%84%E4%BB%B6/"},{"name":"CSS","slug":"web前端/CSS","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/CSS/"},{"name":"js","slug":"web前端/js","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/js/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://surviavalf.github.io/tags/Hexo/"},{"name":"soft-wear","slug":"soft-wear","permalink":"https://surviavalf.github.io/tags/soft-wear/"},{"name":"Vue","slug":"Vue","permalink":"https://surviavalf.github.io/tags/Vue/"},{"name":"CSS","slug":"CSS","permalink":"https://surviavalf.github.io/tags/CSS/"},{"name":"Vue3","slug":"Vue3","permalink":"https://surviavalf.github.io/tags/Vue3/"},{"name":"ElementPlus","slug":"ElementPlus","permalink":"https://surviavalf.github.io/tags/ElementPlus/"}]}