{"meta":{"title":"糖醋灬里脊","subtitle":"Do what u love, love what u do","description":"","author":"糖醋灬里脊","url":"https://surviavalf.github.io","root":"/"},"pages":[{"title":"壁纸","date":"2021-09-03T00:57:54.000Z","updated":"2021-09-03T01:27:46.226Z","comments":true,"path":"bizhi/index.html","permalink":"https://surviavalf.github.io/bizhi/index.html","excerpt":"","text":""},{"title":"about","date":"2021-09-01T08:27:10.000Z","updated":"2021-09-01T08:28:39.884Z","comments":true,"path":"about/index.html","permalink":"https://surviavalf.github.io/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-05-26T08:20:24.000Z","updated":"2021-08-18T09:04:30.633Z","comments":true,"path":"categories/index.html","permalink":"https://surviavalf.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-08-30T06:18:04.000Z","updated":"2021-09-02T01:55:49.743Z","comments":true,"path":"friends/index.html","permalink":"https://surviavalf.github.io/friends/index.html","excerpt":"","text":"Hexohttp://hexo.io VUEhttps://cn.vuejs.org/ Elementhttps://element.eleme.cn/#/zh-CN Echartshttps://echarts.apache.org/zh/index.html Lodashhttps://www.lodashjs.com/ Es6https://es6.ruanyifeng.com/"},{"title":"图库","date":"2021-09-03T00:56:34.000Z","updated":"2021-09-03T01:17:48.144Z","comments":true,"path":"gallery/index.html","permalink":"https://surviavalf.github.io/gallery/index.html","excerpt":"","text":"壁纸 收藏的一些壁纸"},{"title":"tags","date":"2020-05-26T08:20:24.000Z","updated":"2021-09-03T00:58:09.863Z","comments":true,"path":"tags/index.html","permalink":"https://surviavalf.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"hexo博客的搭建","slug":"technology/hexo/create-hexo","date":"2021-09-07T03:05:43.000Z","updated":"2021-09-15T00:30:28.269Z","comments":true,"path":"2021/09/07/technology/hexo/create-hexo/","link":"","permalink":"https://surviavalf.github.io/2021/09/07/technology/hexo/create-hexo/","excerpt":"","text":"前言 搭建自己的博客是我设想了很久的事，最近才落实下来，至于为什么搭建这么多天后才出这个搭建过程一是因为需要熟悉 hexo 博客的一些操作，二是因为懒，本文仅是描述本博客的搭建过程，并不是非常全面，不能称之为教程，只是一个记录，每个电脑的情况不同不要完全相信我接下来要说的步骤，请灵活变通。文章底部有我搭建过程中参考的几个博客，有需自取。 安装Git Bash Git Bash跟在 cmd 中操作命令行差不多，但是能方便一些 官网下载地址我使用的 Git Bash 安装步骤：双击下载好的 exe 文件，一直 next 安装好后，打开 gitbash，输入命令1git version查看版本： 安装nvm nvm 是为了管理不同版本的 node 与 npm 而产生的，安装 nvm 是为了下载 node，如果你不想用可以直接下载node 下载地址我使用的 nvm不要安装到C盘，C盘貌似会有一个虚拟空间，导致node安装失败 安装步骤：双击下载好的 exe 文件，一直 next 安装好后，右键打开 gitbash，输入命令1nvm - v;查看版本： 然后你需要配置淘宝镜像，打开你刚刚 nvm 的安装文件夹，找到 settings.txt 文件里面改成如下代码eg://E:\\nvm//E:\\nvm\\nodejs1234root: 你安装的磁盘:\\你安装的文件夹名path: 你安装的磁盘:\\你安装的文件夹名\\nodejsnode_mirror: https://npm.taobao.org/mirrors/node/npm_mirror: https://npm.taobao.org/mirrors/npm/ nvm 指令的链接你也可以直接下载我用的 node 版本下载链接下载后放到刚才的文件夹（记得解压） 执行完上面的步骤后右键打开 gitbush 输入下面的命令就能看到你拥有的 node 版本1nvm ls使用下面代码应用此版本 node1nvm use 14.16.1使用下面代码查看 node 和 npm 是否安装成功12node - v;npm - v; 安装hexo 先创建一个文件夹（用来存放所有 blog 的东西），然后在该文件夹下打开 gitbush，或者你可以 cd 过来。 安装 hexo 命令：1npm i -g hexo安装完后查看版本： 安装完后初始化：1hexo init初始化完后会有如下文件： 我使用的是 VScode 编译器 我使用的版本在终端里按顺序输入下面代码，就可以访问 http://localhost:4000，这就是你的博客啦123hexo cleanhexo generatehexo server 部署到github 完成上面的步骤你的博客只能在你的本地运行，别人是看不到的，所以你如果想让别人看到需要搭桥到 github 上 没有账号去创建一个账号，名字取好一点，本人 github 的名字当时是瞎起的，单词还拼错了，也懒的改，建议第一次就选个好名字。 创建好账号后去创建一个 repo，名称为 yourname.github.io, 其中 yourname 是你的 github 名称，按照这个规则创建才有用，如下： 回到 gitbash 中，配置 github 账户信息（YourName 和 YourEail 都替换成你自己的）： 创建 SSH在 gitbash 中输入：1ssh-keygen -t rsa -C &quot;youremail@example.com&quot;生成 ssh。然后按下图的方式找到 id_rsa.pub 文件的内容。将上面获取的 ssh 放到 github 中：添加一个 New SSH key ，title 随便取，key 就填刚刚那一段。在 gitbash 中验证是否添加成功：1ssh -T git@github.com 用编辑器打开你的 blog 项目，修改_config.yml 文件的一些配置(冒号之后都是有一个半角空格的)12345deploy: type: git; repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master; 在你的 blog 文件夹下打开 gitbush，先安装一波：1npm install hexo-deployer-git --save（这样才能将你写好的文章部署到 github 服务器上并让别人浏览到）执行命令(建议每次都按照如下步骤部署)：hexo cleanhexo generatehexo deploy注意 deploy 的过程中要输入你的 username 及 passward。你应该会需要输入3次密码（没记错是三次，一次是gitbush里，一次是github的弹出框，一次是密码的单独弹出框），当出现一个单独的密码输入框时，这时候的passward的不再是登录密码，而是一个token，需要去设置，跟下面这个博客学 github开发人员在七夕搞事情在浏览器中输入http://yourgithubname.github.io 就可以看到你的自己的博客了。 （可选）安装TortoiseGit TortoiseGit，我认为小乌龟（俗称）还是挺好用的，至少某些情况下提交代码不需要打命令了 我使用的版本我使用的汉化安装步骤：Git 的安装与 TortoiseGit 的安装和汉化 第一次拉取代码时进入到 github 仓库，找到如图 url复制后在你可以随便选一个文件夹,右键选 Git 克隆,他会自动填充 以后拉取代码时进入克隆的文件夹内，右键如图 推送代码时需要两步操作如图点击 Git 提交点击提交点击推送 结语 有很东西本文是没有涉及到的，我认为在看这篇文章的你需要一“内内”（neinei）的探索精神，自己摸索一下写出来的东西才会带给你成就感，所以加油吧。下面有几个比较好的博主写的可以去看，本人使用的主题是Bamboo,喜欢的可以点链接进去看。hexo 从零开始到搭建完整hexo 史上最全搭建教程(此文章的“3. git 分支进行多终端工作”是本人正在使用但是此篇文章没有介绍的，建议去读一下)教你半小时搭建 Hexo-hueman 主题博客hexo,史上最全搭建个人博客 虽然本文不会有商业用途，但是本文有多处的引用，如有侵权请及时联系本人，本人会立马改正删除。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://surviavalf.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://surviavalf.github.io/tags/Hexo/"}],"author":"糖醋灬里脊"},{"title":"js监听html页面大小变化","slug":"technology/frontEnd/Webjs/window-Change","date":"2021-09-06T08:07:50.000Z","updated":"2021-09-15T00:30:28.268Z","comments":true,"path":"2021/09/06/technology/frontEnd/Webjs/window-Change/","link":"","permalink":"https://surviavalf.github.io/2021/09/06/technology/frontEnd/Webjs/window-Change/","excerpt":"","text":"js 常用的浏览器窗体可视区域大小位置的方法获取窗口的宽度和高度，不包括滚动条 Width: Height: 获取窗口的宽度和高度，包括边线和滚动条的宽 Width: Height: 获取网页正文全文宽高 Width: Height: 获取网页上方或者左边被卷起来的部分 Top: Left: 获取你整个显示器屏幕大小的 Width: Height: 获取浏览器窗口顶部/左端距离屏幕大小的(需要刷新，如果你是多屏此数值是根据一号屏定位) Top: Left: // 定义事件侦听器函数 function watchWindowSize() { // 获取窗口的宽度和高度，不包括滚动条 var txt1=document.getElementById(\"txt1\") var txt2=document.getElementById(\"txt2\") txt1.value = document.documentElement.clientWidth; txt2.value = document.documentElement.clientHeight; //获取窗口的宽度和高度，包括边线和滚动条的宽 var txt3=document.getElementById(\"txt3\") var txt4=document.getElementById(\"txt4\") txt3.value = document.documentElement.offsetWidth; txt4.value = document.documentElement.offsetHeight; //获取网页正文全文宽高 var txt5=document.getElementById(\"txt5\") var txt6=document.getElementById(\"txt6\") txt5.value = document.documentElement.scrollWidth; txt6.value = document.documentElement.scrollHeight; //获取网页上方或者左边被卷起来的部分 var txt7=document.getElementById(\"txt7\") var txt8=document.getElementById(\"txt8\") txt7.value = document.documentElement.scrollTop; txt8.value = document.documentElement.scrollLeft; //获取你整个显示器屏幕大小的 var txt9=document.getElementById(\"txt9\") var txt10=document.getElementById(\"txt10\") txt9.value = window.screen.width; txt10.value = window.screen.height; //浏览器窗口顶部/左端距离屏幕大小的(需要刷新，如果你是多屏此数值是根据一号屏定位) var txt11=document.getElementById(\"txt11\") var txt12=document.getElementById(\"txt12\") txt11.value = window.screenTop; txt12.value = window.screenLeft; } // 将事件侦听器函数附加到窗口的resize事件 window.addEventListener(\"resize\", watchWindowSize); // 第一次调用该函数 watchWindowSize(); 123456789101112131415161718192021222324252627282930// 获取窗口的宽度和高度，不包括滚动条var txt1 = document.getElementById(&quot;txt1&quot;);var txt2 = document.getElementById(&quot;txt2&quot;);txt1.value = document.documentElement.clientWidth;txt2.value = document.documentElement.clientHeight;//获取窗口的宽度和高度，包括边线和滚动条的宽var txt3 = document.getElementById(&quot;txt3&quot;);var txt4 = document.getElementById(&quot;txt4&quot;);txt3.value = document.documentElement.offsetWidth;txt4.value = document.documentElement.offsetHeight;//获取网页正文全文宽高var txt5 = document.getElementById(&quot;txt5&quot;);var txt6 = document.getElementById(&quot;txt6&quot;);txt5.value = document.documentElement.scrollWidth;txt6.value = document.documentElement.scrollHeight;//获取网页上方或者左边被卷起来的部分var txt7 = document.getElementById(&quot;txt7&quot;);var txt8 = document.getElementById(&quot;txt8&quot;);txt7.value = document.documentElement.scrollTop;txt8.value = document.documentElement.scrollLeft;//获取你整个显示器屏幕大小的var txt9 = document.getElementById(&quot;txt9&quot;);var txt10 = document.getElementById(&quot;txt10&quot;);txt9.value = window.screen.width;txt10.value = window.screen.height;//浏览器窗口顶部/左端距离屏幕大小的(需要刷新，如果你是多屏此数值是根据一号屏定位)var txt11 = document.getElementById(&quot;txt11&quot;);var txt12 = document.getElementById(&quot;txt12&quot;);txt11.value = window.screenTop;txt12.value = window.screenLeft;","categories":[{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"js","slug":"web前端/js","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/js/"}],"tags":[],"author":"糖醋灬里脊"},{"title":"css颜色计算器","slug":"technology/frontEnd/Webcss/color-calculator","date":"2021-09-03T01:42:54.000Z","updated":"2021-09-15T00:30:28.265Z","comments":true,"path":"2021/09/03/technology/frontEnd/Webcss/color-calculator/","link":"","permalink":"https://surviavalf.github.io/2021/09/03/technology/frontEnd/Webcss/color-calculator/","excerpt":"","text":"自动配色网站https://www.materialpalette.com/配置渐变色网站https://www.0to255.com/8335a3 RGB颜色值转换成十六进制颜色码： 十六进制颜色码转换成RGB颜色值： function showRGB() { hexcode = \"#\"; for (x = 0; x < 3; x++) { var n = document.getElementsByName(\"r1e\")[x].value; if (n == \"\") n = \"0\"; if (parseInt(n) != n) return alert(\"请输入数字！\"); if (n > 255) return alert(\"数字在0-255之间！\"); var c = \"0123456789ABCDEF\", b = \"\", a = n % 16; b = c.substr(a, 1); a = (n - a) / 16; hexcode += c.substr(a, 1) + b; } document.getElementById(\"color1\").bgColor = a_mo2.innerHTML = hexcode; } function showRGB2() { var a = document.getElementsByName(\"rgb2\")[0].value; if (a.substr(0, 1) == \"#\") a = a.substring(1); var len = a.length; if (len != 6 && len != 3) return alert(\"十六进制颜色码为六位或三位！\"); else if (/[^0-9a-f]/i.test(a)) return alert(\"请输入正确的十六进制颜色码！\"); document.getElementById(\"color2\").bgColor = \"#\" + a; a = a.toLowerCase(); b = new Array(); for (x = 0; x < 3; x++) { b[0] = len == 6 ? a.substr(x * 2, 2) : a.substr(x * 1, 1) + a.substr(x * 1, 1); b[3] = \"0123456789abcdef\"; b[1] = b[0].substr(0, 1); b[2] = b[0].substr(1, 1); b[20 + x] = b[3].indexOf(b[1]) * 16 + b[3].indexOf(b[2]); } a_mo3.innerHTML = b[20] + \",\" + b[21] + \",\" + b[22]; } function getkey(e, n) { var keynum; if (window.event) keynum = e.keyCode; else if (e.which) keynum = e.which; if (keynum == 13) { if (n == 0) showRGB(); else showRGB2(); } } 颜色 英文代码 形象描述 十六进制 RGB LightPink 浅粉红 #FFB6C1 255,182,193 Pink 粉红 #FFC0CB 255,192,203 Crimson 猩红 #DC143C 220,20,60 LavenderBlush 脸红的淡紫色 #FFF0F5 255,240,245 PaleVioletRed 苍白的紫罗兰红色 #DB7093 219,112,147 HotPink 热情的粉红 #FF69B4 255,105,180 DeepPink 深粉色 #FF1493 255,20,147 MediumVioletRed 适中的紫罗兰红色 #C71585 199,21,133 Orchid 兰花的紫色 #DA70D6 218,112,214 Thistle 蓟 #D8BFD8 216,191,216 plum 李子 #DDA0DD 221,160,221 Violet 紫罗兰 #EE82EE 238,130,238 Magenta 洋红 #FF00FF 255,0,255 Fuchsia 灯笼海棠(紫红色) #FF00FF 255,0,255 DarkMagenta 深洋红色 #8B008B 139,0,139 Purple 紫色 #800080 128,0,128 MediumOrchid 适中的兰花紫 #BA55D3 186,85,211 DarkVoilet 深紫罗兰色 #9400D3 148,0,211 DarkOrchid 深兰花紫 #9932CC 153,50,204 Indigo 靛青 #4B0082 75,0,130 BlueViolet 深紫罗兰的蓝色 #8A2BE2 138,43,226 MediumPurple 适中的紫色 #9370DB 147,112,219 MediumSlateBlue 适中的板岩暗蓝灰色 #7B68EE 123,104,238 SlateBlue 板岩暗蓝灰色 #6A5ACD 106,90,205 DarkSlateBlue 深岩暗蓝灰色 #483D8B 72,61,139 Lavender 熏衣草花的淡紫色 #E6E6FA 230,230,250 GhostWhite 幽灵的白色 #F8F8FF 248,248,255 Blue 纯蓝 #0000FF 0,0,255 MediumBlue 适中的蓝色 #0000CD 0,0,205 MidnightBlue 午夜的蓝色 #191970 25,25,112 DarkBlue 深蓝色 #00008B 0,0,139 Navy 海军蓝 #000080 0,0,128 RoyalBlue 皇家蓝 #4169E1 65,105,225 CornflowerBlue 矢车菊的蓝色 #6495ED 100,149,237 LightSteelBlue 淡钢蓝 #B0C4DE 176,196,222 LightSlateGray 浅石板灰 #778899 119,136,153 SlateGray 石板灰 #708090 112,128,144 DoderBlue 道奇蓝 #1E90FF 30,144,255 AliceBlue 爱丽丝蓝 #F0F8FF 240,248,255 SteelBlue 钢蓝 #4682B4 70,130,180 LightSkyBlue 淡蓝色 #87CEFA 135,206,250 SkyBlue 天蓝色 #87CEEB 135,206,235 DeepSkyBlue 深天蓝 #00BFFF 0,191,255 LightBLue 淡蓝 #ADD8E6 173,216,230 PowDerBlue 火药蓝 #B0E0E6 176,224,230 CadetBlue 军校蓝 #5F9EA0 95,158,160 Azure 蔚蓝色 #F0FFFF 240,255,255 LightCyan 淡青色 #E1FFFF 225,255,255 PaleTurquoise 苍白的绿宝石 #AFEEEE 175,238,238 Cyan 青色 #00FFFF 0,255,255 Aqua 水绿色 #D4F2E7 212,242,231 DarkTurquoise 深绿宝石 #00CED1 0,206,209 DarkSlateGray 深石板灰 #2F4F4F 47,79,79 DarkCyan 深青色 #008B8B 0,139,139 Teal 水鸭色 #008080 0,128,128 MediumTurquoise 适中的绿宝石 #48D1CC 72,209,204 LightSeaGreen 浅海洋绿 #20B2AA 32,178,170 Turquoise 绿宝石 #40E0D0 64,224,208 Auqamarin 绿玉\\碧绿色 #7FFFAA 127,255,170 MediumAquamarine 适中的碧绿色 #00FA9A 0,250,154 MediumSpringGreen 适中的春天的绿色 #00FF7F 0,255,127 MintCream 薄荷奶油 #F5FFFA 245,255,250 SpringGreen 春天的绿色 #3CB371 60,179,113 SeaGreen 海洋绿 #2E8B57 46,139,87 Honeydew 蜂蜜 #F0FFF0 240,255,240 LightGreen 淡绿色 #90EE90 144,238,144 PaleGreen 苍白的绿色 #98FB98 152,251,152 DarkSeaGreen 深海洋绿 #8FBC8F 143,188,143 LimeGreen 酸橙绿 #32CD32 50,205,50 Lime 酸橙色 #00FF00 0,255,0 ForestGreen 森林绿 #228B22 34,139,34 Green 纯绿 #008000 0,128,0 DarkGreen 深绿色 #006400 0,100,0 Chartreuse 查特酒绿 #7FFF00 127,255,0 LawnGreen 草坪绿 #7CFC00 124,252,0 GreenYellow 绿黄色 #ADFF2F 173,255,47 OliveDrab 橄榄土褐色 #556B2F 85,107,47 Beige 米色(浅褐色) #F5F5DC 245,245,220 LightGoldenrodYellow 浅秋麒麟黄 #FAFAD2 250,250,210 Ivory 象牙 #FFFFF0 255,255,240 LightYellow 浅黄色 #FFFFE0 255,255,224 Yellow 纯黄 #FFFF00 255,255,0 Olive 橄榄 #808000 128,128,0 DarkKhaki 深卡其布 #BDB76B 189,183,107 LemonChiffon 柠檬薄纱 #FFFACD 255,250,205 PaleGodenrod 灰秋麒麟 #EEE8AA 238,232,170 Khaki 卡其布 #F0E68C 240,230,140 Gold 金 #FFD700 255,215,0 Cornislk 玉米色 #FFF8DC 255,248,220 GoldEnrod 秋麒麟 #DAA520 218,165,32 FloralWhite 花的白色 #FFFAF0 255,250,240 OldLace 老饰带 #FDF5E6 253,245,230 Wheat 小麦色 #F5DEB3 245,222,179 Moccasin 鹿皮鞋 #FFE4B5 255,228,181 Orange 橙色 #FFA500 255,165,0 PapayaWhip 番木瓜 #FFEFD5 255,239,213 BlanchedAlmond 漂白的杏仁 #FFEBCD 255,235,205 NavajoWhite 纳瓦霍白 #FFDEAD 255,222,173 AntiqueWhite 古代的白色 #FAEBD7 250,235,215 Tan 晒黑 #D2B48C 210,180,140 BrulyWood 结实的树 #DEB887 222,184,135 Bisque (浓汤)乳脂,番茄等 #FFE4C4 255,228,196 DarkOrange 深橙色 #FF8C00 255,140,0 Linen 亚麻布 #FAF0E6 250,240,230 Peru 秘鲁 #CD853F 205,133,63 PeachPuff 桃色 #FFDAB9 255,218,185 SandyBrown 沙棕色 #F4A460 244,164,96 Chocolate 巧克力 #D2691E 210,105,30 SaddleBrown 马鞍棕色 #8B4513 139,69,19 SeaShell 海贝壳 #FFF5EE 255,245,238 Sienna 黄土赭色 #A0522D 160,82,45 LightSalmon 浅鲜肉(鲑鱼)色 #FFA07A 255,160,122 Coral 珊瑚 #FF7F50 255,127,80 OrangeRed 橙红色 #FF4500 255,69,0 DarkSalmon 深鲜肉(鲑鱼)色 #E9967A 233,150,122 Tomato 番茄 #FF6347 255,99,71 MistyRose 薄雾玫瑰 #FFE4E1 255,228,225 Salmon 鲜肉(鲑鱼)色 #FA8072 250,128,114 Snow 雪 #FFFAFA 255,250,250 LightCoral 淡珊瑚色 #F08080 240,128,128 RosyBrown 玫瑰棕色 #BC8F8F 188,143,143 IndianRed 印度红 #CD5C5C 205,92,92 Red 纯红 #FF0000 255,0,0 Brown 棕色 #A52A2A 165,42,42 FireBrick 耐火砖 #B22222 178,34,34 DarkRed 深红色 #8B0000 139,0,0 Maroon 栗色 #800000 128,0,0 White 纯白 #FFFFFF 255,255,255 WhiteSmoke 白烟 #F5F5F5 245,245,245 Gainsboro 亮灰色 #DCDCDC 220,220,220 LightGrey 浅灰色 #D3D3D3 211,211,211 Silver 银白色 #C0C0C0 192,192,192 DarkGray 深灰色 #A9A9A9 169,169,169 Gray 灰色 #808080 128,128,128 DimGray 暗淡的灰色 #696969 105,105,105 Black 纯黑 #000000 0,0,0 本文参考了www.sioe.cn 应用工具 原文链接https://www.sioe.cn/yingyong/yanse-rgb-16/","categories":[{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"web前端/CSS","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/CSS/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://surviavalf.github.io/tags/Vue/"},{"name":"CSS","slug":"CSS","permalink":"https://surviavalf.github.io/tags/CSS/"}],"author":"糖醋灬里脊"},{"title":"hexo博客底部显示本站已运行xx年xx月xx日","slug":"technology/hexo/footer-time","date":"2021-09-02T09:17:43.000Z","updated":"2021-09-15T00:30:28.269Z","comments":true,"path":"2021/09/02/technology/hexo/footer-time/","link":"","permalink":"https://surviavalf.github.io/2021/09/02/technology/hexo/footer-time/","excerpt":"","text":"Hexo 中的 .ejs需要找到主题文件夹中的 footer.ejs (可能在Hexo\\themes\\< theme~name >\\layout\\ _partial\\footer，主题不同位置不同) 在合适的位置写 12//不同主题配置的路径不同&lt;%- partial(&#x27;_partial/footer/runTime&#x27;) %&gt; 然后在刚才的文件夹里新建 runTime.ejs 文件，文件中写如下代码，全部复制即可 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;div&gt; &lt;span id=&quot;htmer_time&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt; function secondToDate(second) &#123; if (!second) &#123; return 0; &#125; second = Math.ceil(second / 1000) var time = new Array(0, 0, 0, 0, 0); if (second &gt;= 365 * 24 * 3600) &#123; time[0] = parseInt(second / (365 * 24 * 3600)); second %= 365 * 24 * 3600; &#125; if (second &gt;= 24 * 3600) &#123; time[1] = parseInt(second / (24 * 3600)); second %= 24 * 3600; &#125; if (second &gt;= 3600) &#123; time[2] = parseInt(second / 3600); second %= 3600; &#125; if (second &gt;= 60) &#123; time[3] = parseInt(second / 60); second %= 60; &#125; if (second &gt; 0) &#123; time[4] = second; &#125; return time; &#125; function setTime() &#123; //写自己博客创建的时间 var create_time = new Date(&#x27;2021-8-16 14:11:30&#x27;).getTime(); var timestamp = Date.now(); currentTime = secondToDate(timestamp - create_time); currentTimeHtml = &quot;本站已勉强运行：&quot; + currentTime[0] + &quot;年&quot; + currentTime[1] + &quot;天&quot; + currentTime[2] + &quot;时&quot; + currentTime[3] + &quot;分&quot; + currentTime[4] + &quot;秒&quot;; document.getElementById(&quot;htmer_time&quot;).innerHTML = currentTimeHtml; &#125; setInterval(setTime, 1000);&lt;/script&gt;","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://surviavalf.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://surviavalf.github.io/tags/Hexo/"}],"author":"糖醋灬里脊"},{"title":"hexo博客引入Echarts","slug":"technology/hexo/Echarts","date":"2021-09-01T01:55:43.000Z","updated":"2021-09-15T00:30:28.268Z","comments":true,"path":"2021/09/01/technology/hexo/Echarts/","link":"","permalink":"https://surviavalf.github.io/2021/09/01/technology/hexo/Echarts/","excerpt":"","text":"Hexo 中的 EchartsECharts 是一个使用 JavaScript 实现的开源可视化库，涵盖各行业图表，满足各种需求。功能非常强大，想要用好建议多翻看几遍官网的 API 步骤1.下载在 Hexo 博客中引入ECharts需要下载 Echarts 的 js 文件 echarts.min.js 传送门 然后放在 Hexo\\themes\\< theme~name >\\source\\js 下 2.写直接在.md 文件中写就可以（本人使用的 Hexo 主题为Bamboo需要在主题的 _config.yml 的 import: 下引入刚下载的 js 文件） 1234567891011121314151617181920212223&lt;div id=&quot;test2&quot; style=&quot;width:100%;height:500px;&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;src=&quot;/js/echarts.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;src=&quot;/js/jquery.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;var myChart2 = echarts.init(document.getElementById(&quot;test2&quot;));//div元素节点的对象option = &#123; xAxis: &#123; type: &#x27;category&#x27;, data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;] &#125;, yAxis: &#123; type: &#x27;value&#x27; &#125;, series: [&#123; data: [150, 230, 224, 218, 135, 147, 260], type: &#x27;line&#x27; &#125;]&#125;;myChart2.setOption(option);window.οnresize=function()&#123; myChart2.resize();&#125;&lt;/script&gt; MAKEAPIE一个非常不错的Echarts示例网站 示例 var myChart1 = echarts.init(document.getElementById(\"test1\")); var myChart2 = echarts.init(document.getElementById(\"test2\")); var myChart3 = echarts.init(document.getElementById(\"test3\")); var myChart4 = echarts.init(document.getElementById(\"test4\"));//div元素节点的对象 option1 = { xAxis: { type: 'category', data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'] }, yAxis: { type: 'value' }, series: [{ data: [150, 230, 224, 218, 135, 147, 260], type: 'line' }] }; option2 = { xAxis: { type: 'category', data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'] }, yAxis: { type: 'value' }, series: [{ data: [120, 200, 150, 80, 70, 110, 130], type: 'bar', showBackground: true, backgroundStyle: { color: 'rgba(180, 180, 180, 0.2)' } }] }; option3 = { title: { text: '堆叠区域图' }, tooltip: { trigger: 'axis', axisPointer: { type: 'cross', label: { backgroundColor: '#6a7985' } } }, legend: { data: ['邮件营销', '联盟广告', '视频广告', '直接访问', '搜索引擎'] }, toolbox: { feature: { saveAsImage: {} } }, grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true }, xAxis: [ { type: 'category', boundaryGap: false, data: ['周一', '周二', '周三', '周四', '周五', '周六', '周日'] } ], yAxis: [ { type: 'value' } ], series: [ { name: '邮件营销', type: 'line', stack: '总量', areaStyle: {}, emphasis: { focus: 'series' }, data: [120, 132, 101, 134, 90, 230, 210] }, { name: '联盟广告', type: 'line', stack: '总量', areaStyle: {}, emphasis: { focus: 'series' }, data: [220, 182, 191, 234, 290, 330, 310] }, { name: '视频广告', type: 'line', stack: '总量', areaStyle: {}, emphasis: { focus: 'series' }, data: [150, 232, 201, 154, 190, 330, 410] }, { name: '直接访问', type: 'line', stack: '总量', areaStyle: {}, emphasis: { focus: 'series' }, data: [320, 332, 301, 334, 390, 330, 320] }, { name: '搜索引擎', type: 'line', stack: '总量', label: { show: true, position: 'top' }, areaStyle: {}, emphasis: { focus: 'series' }, data: [820, 932, 901, 934, 1290, 1330, 1320] } ] }; option4 = { title: { text: '某站点用户访问来源', subtext: '纯属虚构', left: 'center' }, tooltip: { trigger: 'item' }, legend: { orient: 'vertical', left: 'left', }, series: [ { name: '访问来源', type: 'pie', radius: '50%', data: [ {value: 1048, name: '搜索引擎'}, {value: 735, name: '直接访问'}, {value: 580, name: '邮件营销'}, {value: 484, name: '联盟广告'}, {value: 300, name: '视频广告'} ], emphasis: { itemStyle: { shadowBlur: 10, shadowOffsetX: 0, shadowColor: 'rgba(0, 0, 0, 0.5)' } } } ] }; myChart1.setOption(option1); myChart2.setOption(option2); myChart3.setOption(option3); myChart4.setOption(option4); window.οnresize=function(){ myChart1.resize(); myChart2.resize(); myChart3.resize(); myChart4.resize(); } 本文参考了CSDN博主「磊少1999」的原创文章 原文链接：https://blog.csdn.net/qq_41426117/article/details/105416911","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://surviavalf.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://surviavalf.github.io/tags/Hexo/"}],"author":"糖醋灬里脊"},{"title":"hexo博客引入动态图表chart","slug":"technology/hexo/chart","date":"2021-08-30T02:55:43.000Z","updated":"2021-09-15T00:30:28.268Z","comments":true,"path":"2021/08/30/technology/hexo/chart/","link":"","permalink":"https://surviavalf.github.io/2021/08/30/technology/hexo/chart/","excerpt":"","text":"Hexo 中的 ChartjsChartjs 的文档首页，相比于 ECharts，感觉 Chart 的某些图表或动画的帧率不高，但是画风清新、干净，令人很舒适，前提是需要引用其他博主写的插件（十分感谢 shen-yu，博主地址）,插件用 npm 安装 1npm install hexo-tag-chart --save 之后在文章内使用 chart 的 tag 就可以了 123&#123;% chart 90% 300 %&#125;\\\\TODO option goes here&#123;% endchart %&#125; 示例(可能因本人使用主题原因，第一次加载会失败，需要刷新) var ctx = document.getElementById('chart2993').getContext('2d'); var options = { type: 'line', data: { labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'], datasets: [{ label: 'My First dataset', backgroundColor: 'rgb(112, 66, 185,0.5)', borderColor: 'rgb(112, 66, 185,0.5)', data: [0, 10, 5, 2, 20, 30, 45] }] }, options: { responsive: true, title: { display: true, text: 'Chart.js Line Chart' } } }; new Chart(ctx, options); 代码 123456789101112131415161718192021&#123;% chart 90% 300 %&#125; &#123; type: &#x27;line&#x27;, data: &#123; labels: [&#x27;January&#x27;, &#x27;February&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;May&#x27;, &#x27;June&#x27;, &#x27;July&#x27;], datasets: [&#123; label: &#x27;My First dataset&#x27;, backgroundColor: &#x27;rgb(112, 66, 185,0.5)&#x27;, borderColor: &#x27;rgb(112, 66, 185,0.5)&#x27;, data: [0, 10, 5, 2, 20, 30, 45] &#125;] &#125;, options: &#123; responsive: true, title: &#123; display: true, text: &#x27;Chart.js Line Chart&#x27; &#125; &#125;&#125;&#123;% endchart %&#125;","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://surviavalf.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://surviavalf.github.io/tags/Hexo/"}],"author":"糖醋灬里脊"},{"title":"电脑控制手机的小软件","slug":"softWear/control-phone","date":"2021-08-27T06:13:50.000Z","updated":"2021-09-15T00:30:28.264Z","comments":true,"path":"2021/08/27/softWear/control-phone/","link":"","permalink":"https://surviavalf.github.io/2021/08/27/softWear/control-phone/","excerpt":"","text":"QtScrcpy 软件 实时显示 Android 设备屏幕,实时键鼠控制 Android 设备。支持 GNU/Linux，Windows 和 MacOS 使用方法在你的电脑上接入 Android 设备，然后运行程序，按顺序点击如下按钮即可连接到 Android 设备 无线连接步骤（保证手机和电脑在同一个局域网）： 安卓手机端在开发者选项中打开 usb 调试 通过 usb 连接安卓手机到电脑 点击刷新设备，会看到有设备号更新出来 点击获取设备 IP(可能需要开启wifi) 点击启动 adbd 无线连接 再次点击刷新设备，发现多出了一个 IP 地址开头的设备，选择这个设备 启动服务 备注：启动 adbd 以后不用再连着 usb 线了，以后连接断开都不再需要，除非安卓 adbd 停了需要重新启动","categories":[],"tags":[{"name":"soft-wear","slug":"soft-wear","permalink":"https://surviavalf.github.io/tags/soft-wear/"}],"author":"糖醋灬里脊"},{"title":"El-tree设置","slug":"technology/frontEnd/Webjs/set-El-tree","date":"2021-08-24T03:08:33.000Z","updated":"2021-09-15T00:30:28.267Z","comments":true,"path":"2021/08/24/technology/frontEnd/Webjs/set-El-tree/","link":"","permalink":"https://surviavalf.github.io/2021/08/24/technology/frontEnd/Webjs/set-El-tree/","excerpt":"","text":"El-tree 设置El-tree 横向显示html 12345678910&lt;el-tree class=&quot;el-tree&quot; ref=&quot;refElTree&quot; :data=&quot;routeList&quot; show-checkbox node-key=&quot;value&quot; :props=&quot;defaultProps&quot; @node-expand=&quot;handleExpand&quot; :render-content=&quot;renderContent&quot;&gt;&lt;/el-tree&gt; data 1234let routeList = ref([]); //树节点 let defaultProps = ref(&#123; children: &quot;children&quot;, label: &quot;label&quot;,&#125;); //树节点 js 123456789101112131415161718192021222324252627282930313233343536373839//树节点的内容区的渲染 Functionconst renderContent = (h, &#123; node, data, store &#125;) =&gt; &#123; let classname = &quot;&quot;; // 由于项目中有三级菜单也有四级级菜单，就要在此做出判断 if (node.level === 4) &#123; classname = &quot;foo&quot;; &#125; if (node.level === 3 &amp;&amp; node.childNodes.length === 0) &#123; classname = &quot;foo&quot;; &#125; if (node.level === 2 &amp;&amp; node.childNodes.length === 0) &#123; classname = &quot;foo&quot;; &#125; return h( &quot;p&quot;, &#123; class: classname &#125;, node.label );&#125;;//节点被展开时触发的事件const handleExpand = () =&gt; &#123; //因为该函数执行在renderContent函数之前，所以得加this.$nextTick() proxy.$nextTick(() =&gt; &#123; changeCss(); &#125;);&#125;;//更改cssconst changeCss = () =&gt; &#123; let levelName = document.getElementsByClassName(&quot;foo&quot;); // levelname是上面的最底层节点的名字 for (let i = 0; i &lt; levelName.length; i++) &#123; // cssFloat 兼容 ie6-8 styleFloat 兼容ie9及标准浏览器 levelName[i].parentNode.style.cssFloat = &quot;left&quot;; // 最底层的节点，包括多选框和名字都让他左浮动 levelName[i].parentNode.style.styleFloat = &quot;left&quot;; levelName[i].parentNode.onmouseover = function () &#123; this.style.backgroundColor = &quot;#fff&quot;; &#125;; &#125;&#125;; El-tree 选择的节点获取1234let Nodes = [ ...refElTree.value.getHalfCheckedKeys(), ...refElTree.value.getCheckedKeys()]; 当父节点中的子节点未完全选择，父组件是半选择状态时，想要获取全部节点（包括半选择的父节点）使用此方法 以下为引用 ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓el-tree 组件在获取选择的节点时，默认的逻辑是，选中父节点时所有的子节点会被选中（checked），但是当该节点下不是选中所有子节点的时候，主节点不会被选中，而是处于一种半选中状态，提交时通过 getCheckedKeys() 方法也不会提交父节点，因为半选中状态下 checked 属性是 false 的。 解决办法通常如果只是为了提交数据，我们可以使用 getHalfCheckedKeys()+getCheckedKeys()来获取需要的数据const data=[…this.$refs.tree.getHalfCheckedKeys(),…this.$refs.tree.getCheckedKeys()] 但是如果需要保存数据且需要编辑，那在编辑初始设置选中项的时候将遇到问题，所以我们只能使用 el-tree 现有的 api 来自己实现需要的功能，el-tree 中有一个属性 check-strictly（在显示复选框的情况下，是否严格的遵循父子不互相关联的做法，默认为 false）意思就是勾选父节点和勾选子节点，没有任何的关系。这是为了解决默认选中节点加载时，选中父节点会同时选中所以子节点，显然这不是我们想要的。&lt;el-treeshow-checkboxnode-key=”id”check-strictly@check-change=”checkChange”ref=”tree”&gt;然后使用 check-change 事件（节点选中状态发生变化时的回调）共三个参数，依次为：传递给 data 属性的数组中该节点所对应的对象、节点本身是否被选中、节点的子树中是否有被选中的节点 1234567891011121314151617181920212223242526272829303132333435checkChange(data, check) &#123; // 父节点操作 if (data.parentId !== null) &#123; if (check === true) &#123; // 如果选中，设置父节点为选中 this.$refs.tree.setChecked(data.parentId, true); &#125; else &#123; // 如果取消选中，检查父节点是否该取消选中（可能仍有子节点为选中状态） var parentNode = this.$refs.tree.getNode(data.parentId); var parentHasCheckedChild = false; for ( var i = 0, parentChildLen = parentNode.childNodes.length; i &lt; parentChildLen; i++ ) &#123; if (parentNode.childNodes[i].checked === true) &#123; parentHasCheckedChild = true; break; &#125; &#125; if (!parentHasCheckedChild) this.$refs.tree.setChecked(data.parentId, false); &#125; &#125; // 子节点操作，如果取消选中，取消子节点选中 if (data.children != null &amp;&amp; check === false) &#123; for (var j = 0, len = data.children.length; j &lt; len; j++) &#123; var childNode = this.$refs.tree.getNode(data.children[j].id); if (childNode.checked === true) &#123; this.$refs.tree.setChecked(childNode.data.id, false); &#125; &#125; &#125;&#125; 作者：段邵华链接：https://www.jianshu.com/p/a482b25ac212来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑","categories":[{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"Element组件","slug":"web前端/Element组件","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/Element%E7%BB%84%E4%BB%B6/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://surviavalf.github.io/tags/Vue/"}],"author":"糖醋灬里脊"},{"title":"css修改","slug":"technology/frontEnd/Webcss/something-css","date":"2021-08-24T02:49:19.000Z","updated":"2021-09-15T00:30:28.265Z","comments":true,"path":"2021/08/24/technology/frontEnd/Webcss/something-css/","link":"","permalink":"https://surviavalf.github.io/2021/08/24/technology/frontEnd/Webcss/something-css/","excerpt":"","text":"1.箭头↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ 2.el-input 属性 type=”number”时去掉右侧箭头本人使用过的未确定好不好用的12345678910111213141516input::-webkit-outer-spin-button,input::-webkit-inner-spin-button &#123; -webkit-appearance: none !important; -moz-appearance: none !important; -o-appearance: none !important; -ms-appearance: none !important; appearance: none !important; margin: 0;&#125;input[type=&quot;number&quot;] &#123; -webkit-appearance: textfield; -moz-appearance: textfield; -o-appearance: textfield; -ms-appearance: textfield; appearance: textfield;&#125;1234567/deep/.[className] input::-webkit-outer-spin-button,/deep/.[className] input::-webkit-inner-spin-button &#123; -webkit-appearance: none !important;&#125;/deep/.[className] input[type=&quot;number&quot;] &#123; -moz-appearance: textfield;&#125; 3.选中改变样式data 里isActive:-1, method 里 123checkedItem(index)&#123; this.isActive=index;&#125;, 页面里 1&lt;div v-for=&quot;(item,index) in nameoptions&quot; class=&quot;class名&quot; :class=&quot;&#123;新加的class样式:index==isActive&#125;&quot; @click=&quot;checkItem(index)&gt;&#123;&#123;item.name&#125;&#125;&lt;/div&gt; 4.Element 滚动条样式123456789 .el-table__body-wrapper::-webkit-scrollbar &#123; width: 0px !important; height: 0px !important; &#125; .el-table__body-wrapper::-webkit-scrollbar-thumb &#123; border-radius: 0px !important; background: transparent !important;&#125; 5.鼠标悬停样式用 css 添加手状样式,鼠标移上去变小手,变小手 cursor:pointer; cursor 其他取值 auto ：标准光标 default ：标准箭头 pointer, hand ：手形光标 wait ：等待光标 text ：I 形光标 vertical-text ：水平 I 形光标 no-drop ：不可拖动光标 not-allowed ：无效光标 help ：帮助光标 all-scroll ：三角方向标 move ：移动标 crosshair ：十字标 e-resize n-resize nw-resize w-resize s-resize se-resize sw-resize 用 JS 使鼠标变小手 onmouseover(鼠标越过的时候)onmouseover=”this.style.cursor=’hand’” 6.纯英文，数字不换行问题处理1.问题描述： 用户输入一串英文字母，设置了换行，但是只有中文换行，英文不换行 2.处理方式： 英文一串字母，被认为是一个单词，所以不换行 1234567 &#123; overflow: hidden; white-space: normal; word-wrap: break-word; word-break: break-all; text-overflow: ellipsis;&#125;","categories":[{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"web前端/CSS","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/CSS/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://surviavalf.github.io/tags/Vue/"},{"name":"CSS","slug":"CSS","permalink":"https://surviavalf.github.io/tags/CSS/"}],"author":"糖醋灬里脊"},{"title":"table列表匹配","slug":"technology/frontEnd/Webjs/table-data-matching","date":"2021-08-24T02:44:12.000Z","updated":"2021-09-15T00:30:28.267Z","comments":true,"path":"2021/08/24/technology/frontEnd/Webjs/table-data-matching/","link":"","permalink":"https://surviavalf.github.io/2021/08/24/technology/frontEnd/Webjs/table-data-matching/","excerpt":"","text":"table 列表数据匹配123456789101112131415161718//Html&lt;el-table-column prop=&quot;rcCreatePerson&quot; align=&quot;center&quot; label=&quot;创建人&quot; :formatter=&quot;rcCreatePersonFormatter&quot; show-overflow-tooltip&gt;&lt;/el-table-column&gt;//js// 创建人rcCreatePersonFormatter(row, column, cellValue) &#123; try &#123; return this.userList.find((item) =&gt; item.userId === cellValue). userName; &#125; catch (e) &#123; return cellValue; &#125;&#125;,","categories":[{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"Element组件","slug":"web前端/Element组件","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/Element%E7%BB%84%E4%BB%B6/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://surviavalf.github.io/tags/Vue/"}],"author":"糖醋灬里脊"},{"title":"动态表头","slug":"technology/frontEnd/Webjs/dynamic-table-header","date":"2021-08-24T02:35:48.000Z","updated":"2021-09-15T00:30:28.265Z","comments":true,"path":"2021/08/24/technology/frontEnd/Webjs/dynamic-table-header/","link":"","permalink":"https://surviavalf.github.io/2021/08/24/technology/frontEnd/Webjs/dynamic-table-header/","excerpt":"","text":"动态表头Html表内数据的字段名需要对应表头中的 prop 123456789101112131415161718192021222324252627282930313233&lt;el-table :data=&quot;peopleDataList&quot; height=&quot;92%&quot; border style=&quot;width: 100%&quot; v-loading=&quot;tableLoading&quot;&gt; &lt;el-table-column prop=&quot;tfUpdateDate&quot; align=&quot;center&quot; label=&quot;更新时间&quot; &gt;&lt;/el-table-column&gt; &lt;el-table-column align=&quot;center&quot; v-for=&quot;(item, index, key) in equTable_columns&quot; :item=&quot;item&quot; :key=&quot;key&quot; :index=&quot;index&quot; :label=&quot;item.label&quot; &gt; &lt;template v-slot:header&gt; &lt;el-popover width=&quot;400&quot; trigger=&quot;hover&quot; placement=&quot;top&quot;&gt; &lt;span style=&quot;color: white;&quot;&gt;&#123;&#123; item.label &#125;&#125;&lt;/span&gt; &lt;div slot=&quot;reference&quot; class=&quot;header-ellipsis&quot;&gt; &lt;span&gt;&#123;&#123; item.label &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/el-popover&gt; &lt;/template&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &#123;&#123; scope.row[item.prop] &#125;&#125; &lt;/template&gt; &lt;/el-table-column&gt;&lt;/el-table&gt; Data123456789101112131415161718192021222324252627282930313233//表头信息equTable_columns: [&#123; prop: &quot;name1&quot;, label: &quot;事件A&quot;, width: &quot;&quot;,&#125;,&#123; prop: &quot;name2&quot;, label: &quot;事件B&quot;, width: &quot;&quot;,&#125;,&#123; prop: &quot;name3&quot;, label: &quot;事件C&quot;, width: &quot;&quot;,&#125;,&#123; prop: &quot;name4&quot;, label: &quot;事件D&quot;, width: &quot;&quot;,&#125;,],//表内信息peopleDataList:[ &#123; tfUpdateDate: &quot;2021-10-9&quot;, name1:&quot;事件1&quot; &#125;, &#123; tfUpdateDate: &quot;2021-10-9&quot;, &#125;] 表头过长隐藏12345678&lt;template v-slot:header&gt; &lt;el-popover width=&quot;400&quot; trigger=&quot;hover&quot; placement=&quot;top&quot;&gt; &lt;span style=&quot;color: white;&quot;&gt;&#123;&#123; item.label &#125;&#125;&lt;/span&gt; &lt;div slot=&quot;reference&quot; class=&quot;header-ellipsis&quot;&gt; &lt;span&gt;&#123;&#123; item.label &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/el-popover&gt;&lt;/template&gt; 123456789101112/deep/.el-popover &#123; max-width: 200px; width: none; text-align: center !important;&#125;.header-ellipsis &#123; width: 120px; padding: 0px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;&#125;","categories":[{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"Element组件","slug":"web前端/Element组件","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/Element%E7%BB%84%E4%BB%B6/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://surviavalf.github.io/tags/Vue/"}],"author":"糖醋灬里脊"},{"title":"递归","slug":"technology/frontEnd/Webjs/recursion","date":"2021-08-24T02:27:50.000Z","updated":"2021-09-15T00:30:28.266Z","comments":true,"path":"2021/08/24/technology/frontEnd/Webjs/recursion/","link":"","permalink":"https://surviavalf.github.io/2021/08/24/technology/frontEnd/Webjs/recursion/","excerpt":"","text":"vue 递归代码123456789101112131415161718192021222324caltaskScorePeopleData(item) &#123; var that = this; let len = this.score.length - 1; let index = 0; setData(); function setData() &#123; let params = &#123; taUuid: that.score[index].taUuid, evaluationScore: that.score[index].evaluationScore, userUuid: that.score[index].userUuid, eventId: that.score[index].eventId, &#125;; personnelAssessmentScore(params).then((res) =&gt; &#123; index++; if (index &gt; len) &#123; that.caltaskScorePeople2(item); &#125; else &#123; setData(); &#125; &#125;); &#125;&#125;,","categories":[{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"js","slug":"web前端/js","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/js/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://surviavalf.github.io/tags/Vue/"}],"author":"糖醋灬里脊"},{"title":"部分数据处理方式","slug":"technology/frontEnd/Webjs/js- dispose","date":"2021-08-24T02:25:43.000Z","updated":"2021-09-15T00:30:28.266Z","comments":true,"path":"2021/08/24/technology/frontEnd/Webjs/js- dispose/","link":"","permalink":"https://surviavalf.github.io/2021/08/24/technology/frontEnd/Webjs/js-%20dispose/","excerpt":"","text":"1.计算时间差代码1234567891011121314151617181920212223242526 timeChange(data1, data2) &#123; let dateBegin = new Date(data2.replace(/-/g, &quot;/&quot;)); let dateEnd = new Date(data1.replace(/-/g, &quot;/&quot;)); let dateDiff = dateEnd.getTime() - dateBegin.getTime(); //时间差的毫秒数 let dayDiff = Math.floor(dateDiff / (24 * 3600 * 1000)); //计算出相差天数 let leave1 = dateDiff % (24 * 3600 * 1000); //计算天数后剩余的毫秒数 let hours = Math.floor(leave1 / (3600 * 1000)); //计算出小时数 //计算相差分钟数 let leave2 = leave1 % (3600 * 1000); //计算小时数后剩余的毫秒数 let minutes = Math.floor(leave2 / (60 * 1000)); //计算相差分钟数 //计算相差秒数 let leave3 = leave2 % (60 * 1000); //计算分钟数后剩余的毫秒数 let seconds = Math.round(leave3 / 1000); console.log( &quot; 相差 &quot; + dayDiff + &quot;天 &quot; + hours + &quot;小时 &quot; + minutes + &quot; 分钟&quot; + seconds + &quot; 秒&quot; ); &#125;, 2.刷新数组this.$forceUpdate() 3.小数取整1，Math.ceil()方法向上取整，整数部分值+1： eg：Math.ceil(3/2) 输出：2 2，Math.floor()方法向下取整，整数部分值不变： eg：Math.floor(3/2) 输出：1 3，Math.round()方法四舍五入取整： eg：Math.round(3/2) 输出：2 4，parseInt()方法 抛去小数部分，只取整数部分： eg：parseInt(3/2) 输出：1 4.手机号/身份证1234567891011121314151617181920212223//reg.js页面//判断是否是手机号export const isPhoneNumber = (mobile) =&gt; &#123; let reg = /^1(3[0-9]|4[5,7]|5[0,1,2,3,5,6,7,8,9]|6[2,5,6,7]|7[0,1,7,8]|8[0-9]|9[1,8,9])\\d&#123;8&#125;$/; return reg.test(mobile);&#125;;//判断是否是身份证export const isCardNo = (card) =&gt; &#123; let reg = /^[1-9]\\d&#123;5&#125;[1-9]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;([0-9]|X)$/; return reg.test(card);&#125;;//手机号中间隐藏export const mobileEncrypt = (mobile) =&gt; &#123; mobile = mobile + &quot;&quot;; return `+86$&#123;mobile.replace(/(\\d&#123;3&#125;)\\d*(\\d&#123;4&#125;)/, `$1 **** $2`)&#125;`;&#125;;//Vueimport &#123; mobileEncrypt &#125; from &quot;@/utils/reg.js&quot;;userMobilePhone = mobileEncrypt(userMobilePhone); 5.字符长度计算（中文算两个字符）12345678910111213export const getStringLength = (e) =&gt; &#123; let [length, cn, en] = [0, 0, 0]; Array.from(e).map((item) =&gt; &#123; if (e.charAt(item).match(/[\\u4e00-\\u9fa5]/g)) &#123; length += 2; cn++; &#125; else &#123; length += 1; en++; &#125; &#125;); return length;&#125;;","categories":[{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"js","slug":"web前端/js","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/js/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://surviavalf.github.io/tags/Vue/"}],"author":"糖醋灬里脊"},{"title":"人员选择器","slug":"technology/frontEnd/Webjs/personnel-selection","date":"2021-08-18T03:14:07.000Z","updated":"2021-09-15T00:30:28.266Z","comments":true,"path":"2021/08/18/technology/frontEnd/Webjs/personnel-selection/","link":"","permalink":"https://surviavalf.github.io/2021/08/18/technology/frontEnd/Webjs/personnel-selection/","excerpt":"","text":"使用 Element-plus 中的 Transfer 穿梭框 组件封装的一个人员选择器，使用的是 VUE3 中的 setup 语法糖写法 选择器子组件的.vue 文件代码userMailList 为全部人员 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133&lt;template&gt; &lt;el-dialog title=&quot;人员选择&quot; v-model=&quot;show&quot; width=&quot;640px&quot; :close-on-click-modal=&quot;false&quot; center @close=&quot;clearitems&quot; &gt; &lt;div class=&quot;peopleCheck&quot;&gt; &lt;el-transfer v-model=&quot;yetPeople&quot; filterable :filter-method=&quot;filterMethod&quot; filter-placeholder=&quot;请输入人员拼音&quot; :data=&quot;allPeople&quot; @left-check-change=&quot;changeLeftPeople&quot; :titles=&quot;[&#x27;未选人员&#x27;, &#x27;已选人员&#x27;]&quot; /&gt; &lt;/div&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;check&quot;&gt;确认&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; ref, reactive, onMounted, defineEmits, defineProps, defineExpose, watch,&#125; from &quot;vue&quot;;import &#123; userMailList &#125; from &quot;@/http/api/workbench&quot;;const emits = defineEmits([&quot;clearitems&quot;, &quot;backData&quot;]);const props = defineProps(&#123; choosePeople: &#123; type: Array, default: () =&gt; &#123; return []; &#125;, &#125;, type: &#123; type: String, default: () =&gt; &#123; return &quot;&quot;; &#125;, &#125;,&#125;);let show = ref(true);let yetPeople = ref([]);let allPeople = ref([]);let leftPeople = ref(&quot;&quot;);//拉取数据const generateData = async () =&gt; &#123; let res = await userMailList(&#123;&#125;); let peopleList = res.data; const datain = []; peopleList.forEach((item, index) =&gt; &#123; datain.push(&#123; label: item.userName, key: item.accountId, spell: item.userName, disabled: item.isMain === true ? true : false, isAdmin: item.isMain, &#125;); &#125;); allPeople.value = datain; yetPeople.value = JSON.parse(JSON.stringify(props.choosePeople));&#125;;//确认const check = () =&gt; &#123; emits(&quot;backData&quot;, yetPeople.value); clearitems();&#125;;//左侧选择的人员监听const changeLeftPeople = (query, item) =&gt; &#123; leftPeople.value = query;&#125;;//退出const clearitems = () =&gt; &#123; emits(&quot;clearitems&quot;);&#125;;//自定义搜索方法const filterMethod = (query, item) =&gt; &#123; return item.spell.indexOf(query) &gt; -1;&#125;;// 监听//监听左侧人员选择状态watch(leftPeople, (nVal) =&gt; &#123; if (leftPeople.value.length &gt; 0 &amp;&amp; props.type == &quot;limt1&quot;) &#123; allPeople.value.forEach((item, index) =&gt; &#123; if (item.key != leftPeople.value) &#123; item.disabled = true; &#125; &#125;); &#125; else if (props.type == &quot;limt1&quot;) &#123; allPeople.value.forEach((item, index) =&gt; &#123; if (item.isAdmin !== true) &#123; item.disabled = false; &#125; &#125;); &#125;&#125;);//监听右侧是否有已选择的人员watch(yetPeople, (nVal) =&gt; &#123; if (yetPeople.value.length == 0 &amp;&amp; props.type == &quot;limt1&quot;) &#123; allPeople.value.forEach((item, index) =&gt; &#123; if (item.isAdmin !== true) &#123; item.disabled = false; &#125; &#125;); &#125;&#125;);onMounted(() =&gt; &#123; generateData();&#125;);&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.peopleCheck &#123; height: 500px; ::v-deep(.el-transfer-panel__body) &#123; height: 350px; &#125; ::v-deep(.el-transfer-panel__list.is-filterable) &#123; height: 350px; &#125;&#125;&lt;/style&gt; 父组件的部分代码template 内引入子组件123456789&lt;PeopleCheck ref=&quot;refPeopleCheck&quot; v-if=&quot;checkPeopleCheck&quot; :choosePeople=&quot;choosePeople&quot; 已选的人员的ID数组 type=&quot;limt1&quot; 打开只能从左侧选择一个人的模式 @backData=&quot;backData&quot; 回显 @clearitems=&quot;clearitems&quot; 关闭 /&gt; js1234567891011121314//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓成员选择组件↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓////打开成员选择const peopleCheckShow = async (row) =&gt; &#123; //已选择的人 choosePeople.value = &#123;&#123;子组件中peopleList的key相对应 &#125;&#125; checkPeopleCheck.value = true;&#125;;//成员选择回显的数据const backData = (data) =&gt; &#123;&#125;;//关闭const clearitems = (row) =&gt; &#123; checkPeopleCheck.value = false;&#125;;//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑成员选择组件↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑//","categories":[{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"Element组件","slug":"web前端/Element组件","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/Element%E7%BB%84%E4%BB%B6/"}],"tags":[{"name":"Vue3","slug":"Vue3","permalink":"https://surviavalf.github.io/tags/Vue3/"},{"name":"ElementPlus","slug":"ElementPlus","permalink":"https://surviavalf.github.io/tags/ElementPlus/"}],"author":"糖醋灬里脊"},{"title":"Hello World","slug":"hello-world","date":"2021-08-16T06:11:30.000Z","updated":"2021-09-15T00:30:28.264Z","comments":true,"path":"2021/08/16/hello-world/","link":"","permalink":"https://surviavalf.github.io/2021/08/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"author":"糖醋灬里脊"}],"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://surviavalf.github.io/categories/Hexo/"},{"name":"web前端","slug":"web前端","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"js","slug":"web前端/js","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/js/"},{"name":"CSS","slug":"web前端/CSS","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/CSS/"},{"name":"Element组件","slug":"web前端/Element组件","permalink":"https://surviavalf.github.io/categories/web%E5%89%8D%E7%AB%AF/Element%E7%BB%84%E4%BB%B6/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://surviavalf.github.io/tags/Hexo/"},{"name":"Vue","slug":"Vue","permalink":"https://surviavalf.github.io/tags/Vue/"},{"name":"CSS","slug":"CSS","permalink":"https://surviavalf.github.io/tags/CSS/"},{"name":"soft-wear","slug":"soft-wear","permalink":"https://surviavalf.github.io/tags/soft-wear/"},{"name":"Vue3","slug":"Vue3","permalink":"https://surviavalf.github.io/tags/Vue3/"},{"name":"ElementPlus","slug":"ElementPlus","permalink":"https://surviavalf.github.io/tags/ElementPlus/"}]}